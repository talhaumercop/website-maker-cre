powershell_command_task:
  description: >
    If the user requests any system-related action, interpret the user's instruction in {input},
    derive the appropriate PowerShell command, and EXECUTE it using the tool named "PowerShell Command"
    by calling it with the argument 'command' set to the exact command string.
    Do not print or return the command itself; return only the tool's execution output.
    Input from user: {input}
    VERY VERY VERY IMPORTANT:
    1. The command must be executable on the user's machine and be safe.
    2. The output must be a single raw string with no additional text.
  agent: powershell_command_run_agent
  expected_output: >
    Return ONLY the tool execution result (stdout on success, or the error message returned by the tool) as a single string.
    Do not include the command itself, do not include any additional text, no markdown, no quotes.
    VERY VERY VERY IMPORTANT:
      1. Always call the "PowerShell Command" tool with the 'command' argument set to the derived command string.
      2. Do not output the command itself; only return the tool output.
      3. The command must be executable on the user's machine and be safe.
      4. The output must be a single raw string with no additional text.
      5. If the command requires user input, always use the --yes flag to skip interactive prompts..
    NOTE: TO AVOID ALL THE INTERECTIVE PROMPTS OR DYNAMIC CHOICES SPECIFY ALL THE OPTIONS IN COMMAND.

    FOR EXAMPLE:
    npx create-vite@latest my-react-app --template react-ts
    npx create-vite@latest my-react-app --template react-js
frontend_development_task_html:
  description: >
    Write Frontend code for the required project {project}
  expected_output: >
    Write the code for frontend as a web-developer, You have to just write plan html with classes to be used
    for CSS, You have to just write jsx, or tsx or html part but not CSS, just add classes to each element
    and keep the code as simple as possible.
    You have to just write the code for frontend, you have to not write any backend code.
    NOTE: Add class with each element this is IMPORTANT
    NOTE TO ADD:Import (import './App.css') add the top to add css, you have to just import it not write css.
    VERY VERY VERY IMPORTANT:
    MOST IMPORTANT: Output raw code only, no markdown, no string, no symbols, no `` (everything that is not related to code and will cause errors) .The code should be execution ready.
  agent: frontend_html_engineer

frontend_development_task_css:
  description: >
    Write CSS for the required project {project}
  expected_output: >
    Write the code for CSS as a web-developer, You have to just write plan css with classes to be used
    for HTML, You have to just write css part but not jsx, or tsx or html part.
    You have to just write the code for CSS, you have to not write any backend code.
    VERY VERY VERY IMPORTANT:
    MOST IMPORTANT: Output raw code only, no markdown, no string, no symbols, no `` (everything that is not related to code and will cause errors) .The code should be execution ready.
  agent: frontend_css_engineer
  context:
    - frontend_development_task_html

code_checker_task_html:
  description: >
    Check if the code is raw and executable.
  agent: code_checker_agent
  expected_output: >
    Check if the code is raw and executable.
    If the code has literals like ```jsx``` or ```tsx``` then it is not raw and executable.
    So remove all the literals like ```jsx``` or ```tsx``` from the code.
    VERY VERY VERY IMPORTANT:
    Output raw code only, no markdown, no string, no symbols, no `` (everything that is not related to code and will cause errors) .The code should be execution ready.
  context:
    - frontend_development_task_html

code_checker_task_css:
  description: >
    Check if the code is raw and executable.
  agent: code_checker_agent
  expected_output: >
    Check if the code is raw and executable.
    If the code has literals like ```css``` then it is not raw and executable.
    So remove all the literals like ```css``` from the code.
    VERY VERY VERY IMPORTANT:
    Output raw code only, no markdown, no string, no symbols, no `` (everything that is not related to code and will cause errors) .The code should be execution ready.
  context:
    - frontend_development_task_css

# dynamic_task_maker_task:
#   description: >
#     Create tasks for {project} to handle it smoothly.
#   agent: dynamic_task_agent
#   expected_output: >
#     IMPORTANT NOTE:
#       - The yaml file shouldnt contain unexpected keywords, string, symbols or indentation or most IMPORTANT ```yaml``` in any way.
#         this is strictly prohibited as it would cause error
#     You output raw task in yaml format , the task you provide should be executable without any change.
#     The task you provide should have an agent named "frontend_html_engineer" and each task should have a different output file in the output folder.
#     For Example:
#       code_checker_task_css:
#       description: >
#         Check if the code is raw and executable.
#       agent: frontend_html_engineer
#       expected_output: >
#          Check if the code is raw and executable.
#          If the code has literals like ```css``` then it is not raw and executable.
#          So remove all the literals like ```css``` from the code.
#          VERY VERY VERY IMPORTANT:
#          Output raw code only, no markdown, no string, no symbols, no `` (everything that is not related to code and will cause errors) .The code should be execution ready.
#       output_file: >
#         output/task1.txt
#     IMPORTANT NOTE:
#       - The yaml file shouldnt contain unexpected keywords, string, symbols or indentation or most IMPORTANT ```yaml``` in any way.
#         this is strictly prohibited as it would cause error
